#! /usr/bin/env python3

import sys
"""
Briefly analyze the trace generated by ./workloads/ro-get-scan.input
    The goal is to combine Get() workloads with Scan() workloads
"""


def is_line_scan(line: str) -> bool:
    if "SCAN usertable" in line:
        return True


def is_line_read(line: str) -> bool:
    if "READ usertable" in line:
        return True


def extract_key(item: str) -> int:
    return int(item[4:])


def get_sorted_by_val_dict(d):
    sorted_dict = dict(sorted(d.items(), key=lambda item: item[1],
                              reverse=True))
    return sorted_dict


def show_scan_lengh(trace_name):
    key_freq_dict = {}
    scan_start_key_freq_dict = {}
    scan_all_key_freq_dict = {}
    start_key_len_list_dict = {}
    scan_len_list = []
    with open(trace_name) as f:
        for line in f:
            line = line.strip()
            items = line.split()
            cur_key = None
            if is_line_read(line):
                cur_key = extract_key(items[2])
            elif is_line_scan(line):
                cur_key = extract_key(items[2])
                if cur_key not in scan_start_key_freq_dict:
                    scan_start_key_freq_dict[cur_key] = 0
                    start_key_len_list_dict[cur_key] = []
                cur_scan_len = int(items[3])
                start_key_len_list_dict[cur_key].append(cur_scan_len)
                scan_len_list.append(cur_scan_len)
                for i in range(cur_scan_len):
                    cur_k = cur_key + i
                    if cur_k not in scan_all_key_freq_dict:
                        scan_all_key_freq_dict[cur_k] = 0
                    scan_all_key_freq_dict[cur_k] += 1
            else:
                continue
            if cur_key not in key_freq_dict:
                key_freq_dict[cur_key] = 0
            key_freq_dict[cur_key] += 1
    s_key_freq_dict = get_sorted_by_val_dict(key_freq_dict)
    s_scan_start_key_freq_dict = get_sorted_by_val_dict(
        scan_start_key_freq_dict)
    s_scan_all_key_freq_dict = get_sorted_by_val_dict(scan_all_key_freq_dict)
    print('-------')
    for start_k, num_ac in s_scan_start_key_freq_dict.items():
        cur_read_freq = 0
        if start_k in s_key_freq_dict:
            cur_read_freq = s_key_freq_dict[start_k]
        print(
            f'start_key:{start_k} read_freq:{cur_read_freq} len_list:{start_key_len_list_dict[start_k]}'
        )
    print('-------')
    for cur_k, num_ac in s_scan_all_key_freq_dict.items():
        cur_read_freq = 0
        if cur_k in s_key_freq_dict:
            cur_read_freq = s_key_freq_dict[cur_k]
        print(f'scanned_key:{cur_k} read_freq:{cur_read_freq}')
    print('-------')
    for cur_l in sorted(scan_len_list, reverse=True):
        print(f'{cur_l}')


def pring_usage(argv0):
    print(f'Usage {argv0} <trace_name>')


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print_usage(sys.argv[0])
    trace_name = sys.argv[1]
    show_scan_lengh(trace_name)
